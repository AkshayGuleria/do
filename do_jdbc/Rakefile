require 'rubygems'
require 'rake'
require 'rake/rdoctask'
require 'spec/rake/spectask'
require 'pathname'
require 'lib/do_jdbc/version.rb'

ROOT = Pathname(__FILE__).dirname.expand_path

JRUBY = (RUBY_PLATFORM =~ /java/) rescue nil

AUTHOR = "Alex Coles"
EMAIL  = "alex@alexcolesportfolio.com"
GEM_NAME = "do_jdbc"
GEM_VERSION = DataObjects::Jdbc::VERSION
GEM_DEPENDENCIES = [["data_objects", GEM_VERSION]]
GEM_CLEAN = ['derby*', 'test.db.*','test/reports', 'test.sqlite3','lib/**/*.jar','manifest.mf']
#GEM_EXTRAS = { :platform => 'java', :has_rdoc => true, :extra_rdoc_files => %w[ README MIT-LICENSE GPL-LICENSE TODO ] }
GEM_EXTRAS = {}

PROJECT_NAME = "dorb"
PROJECT_URL  = "http://rubyforge.org/projects/dorb"
PROJECT_DESCRIPTION = PROJECT_SUMMARY = "A DataObjects.rb driver for JDBC"

DRIVER = true

# By default, sudo is used, except if SUDOLESS env is true
SUDO = 'sudo' unless ENV['SUDOLESS']

if (tasks_dir = ROOT.parent + 'tasks').directory?
  require tasks_dir + 'hoe'
end

def sudo_gem(cmd)
  sh "#{SUDO} #{RUBY} -S gem #{cmd}", :verbose => false
end

# Installation

task :default => [ :java_compile ]

def java_classpath_arg # myriad of ways to discover JRuby classpath
  #begin
  #  jruby_cpath = Java::java.lang.System.getProperty('java.class.path')
  #rescue => e
  #end
  #unless jruby_cpath
    jruby_cpath = ENV['JRUBY_PARENT_CLASSPATH'] || ENV['JRUBY_HOME'] &&
      FileList["#{ENV['JRUBY_HOME']}/lib/*.jar"].join(File::PATH_SEPARATOR)
  #end
  jruby_cpath ? "-cp #{jruby_cpath}" : ""
end

desc "Compile the native Java code."
task :java_compile do
  pkg_classes = File.join(*%w(pkg classes))
  jar_name = File.join(*%w(lib do_jdbc_internal.jar))
  mkdir_p pkg_classes
  sh "javac -target 1.5 -source 1.5 -Xlint:unchecked -d pkg/classes #{java_classpath_arg} #{FileList['src/java/**/*.java'].join(' ')}"
  sh "jar cf #{jar_name} -C #{pkg_classes} ."
end
file "lib/do_jdbc_internal.jar" => :java_compile

task :filelist do
  puts FileList['pkg/**/*'].inspect
end

desc "Install #{GEM_NAME} #{GEM_VERSION}"
task :install => [ :package ] do
  sudo_gem "install pkg/#{GEM_NAME}-#{GEM_VERSION} --no-update-sources"
end

desc "Uninstall #{GEM_NAME} #{GEM_VERSION}"
task :uninstall => [ :clobber ] do
  sudo_gem "uninstall #{GEM_NAME} -v#{GEM_VERSION} -I -x"
end
