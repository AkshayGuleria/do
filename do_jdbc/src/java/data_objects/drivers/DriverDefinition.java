package data_objects.drivers;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.jruby.Ruby;
import org.jruby.RubyObjectAdapter;
import org.jruby.exceptions.RaiseException;
import org.jruby.runtime.builtin.IRubyObject;

import data_objects.RubyType;

/**
 *
 * @author alexbcoles
 */
public interface DriverDefinition {

    public String getModuleName();

    public String getErrorName();

    public URI parseConnectionURI(IRubyObject uri) throws URISyntaxException,
            UnsupportedEncodingException;

    public RaiseException newDriverError(Ruby runtime, String message);

    public RaiseException newDriverError(Ruby runtime, SQLException sqe);

    public RaiseException newDriverError(Ruby runtime, SQLException sqle,
            Statement statement);

    public RubyObjectAdapter getObjectAdapter();

    public IRubyObject getTypecastResultSetValue(Ruby runtime, ResultSet rs,
            int col, RubyType type) throws SQLException, IOException;

    public void setPreparedStatementParam(PreparedStatement ps,
            IRubyObject arg, int idx) throws SQLException;

    /**
     * Additional processing/santitization (of quoting, escapes, etc.) may be
     * required by some JDBC Drivers (in addition to the processing of
     * question-marks representing parameters) before passing this text to
     * Connection#prepareStatement.
     *
     * @param psText the text for the java.sql.PreparedStatement
     * @return the sanitized text for the java.sql.PreparedStatement
     */
    String sanitizePreparedStatementText(String psText);

    /**
     * Whether the Driver supports properly supports JDBC 3.0's
     * autogenerated keys feature
     *
     * @return
     */
    public boolean supportsJdbcGeneratedKeys();

    /**
     * Whether the Driver supports properly JDBC 2.0's
     * scrollable result sets
     *
     * XXX left taking consideration into further versions
     *
     * @return
     */
    public boolean supportsJdbcScrollableResultSets();

    /**
     * A workaround for drivers that throw a SQLException if Connection#prepareStatement(String, int)
     * is called.
     *
     * @return
     */
    public boolean supportsConnectionPrepareStatementMethodWithGKFlag();

    /**
     * Method tells if Calendar instances passed to PreparedStatement
     * are accepted (returned true) or ignored
     * @return
     */
    public boolean supportsCalendarsInJDBCPreparedStatement();

    /**
     * Whether the Driver supports specifying a connection encoding
     *
     * @return
     */
    public boolean supportsConnectionEncodings();

    /**
     * If the driver does not properly support JDBC 3.0's autogenerated keys,
     * then custom SQL can be provided to look up the autogenerated keys for
     * a connection.
     *
     * @param connection
     * @return
     */
    public ResultSet getGeneratedKeys(Connection connection);

    /**
     * A default list of properties for a connection for a driver.
     *
     * @return
     */
    public Properties getDefaultConnectionProperties();

    /**
     * If the driver supports setting connection encodings, specify the appropriate
     * property to set the connection encoding.
     *
     * @param props
     * @param encodingName
     * @see #supportsConnectionEncodings()
     */
    public void setEncodingProperty(Properties props, String encodingName);

    public String quoteString(String str);

    public String toString(PreparedStatement ps);

}
